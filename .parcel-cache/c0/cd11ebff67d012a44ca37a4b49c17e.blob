var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "handleUserPersistedPreference", function () {
  return handleUserPersistedPreference;
});
_parcelHelpers.export(exports, "setDarkMode", function () {
  return setDarkMode;
});
_parcelHelpers.export(exports, "setLightMode", function () {
  return setLightMode;
});
var _utilsConstants = require('../utils/constants');
syncBtnText();
handleUserPersistedPreference();
handleUserChanges();
handleMediaQueryChanges();
function syncBtnText() {
  const toggleModeBtn = document.querySelector('.toggle-mode-btn');
  if (!toggleModeBtn) return;
  const initPrefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
  const initPrefersLight = window.matchMedia('(prefers-color-scheme: light)').matches;
  if (initPrefersDark) {
    toggleModeBtn.innerHTML = 'DARK';
  }
  if (initPrefersLight) {
    toggleModeBtn.innerHTML = 'LIGHT';
  }
}
function handleUserPersistedPreference() {
  const persistedPreference = localStorage.getItem(_utilsConstants.LOCAL_STORAGE_KEY);
  if (!persistedPreference) return;
  if (persistedPreference === 'DARK') {
    setDarkMode();
  }
  if (persistedPreference === 'LIGHT') {
    setLightTheme();
  }
}
function handleUserChanges() {
  const toggleModeBtn = document.querySelector('.toggle-mode-btn');
  if (!toggleModeBtn) return;
  toggleModeBtn.addEventListener('click', handleToggle);
  const themesArr = ['LIGHT', 'DARK', 'LIGHT SERIF', 'DARK SERIF', 'LIGHT VAPORWAVE', 'DARK VAPORWAVE'];
  async function handleToggle() {
    const themeText = toggleModeBtn.innerHTML;
    console.log(`themeText`, themeText);
    const themeIndex = themesArr.indexOf(themeText.trim());
    const nextText = themesArr[themeIndex + 1];
    // import dynamic theme
    if (nextText === 'LIGHT SERIF' || nextText === 'DARK SERIF') {
      await require('../themes/serif');
    }
    if (nextText === 'LIGHT VAPORWAVE' || nextText === 'DARK VAPORWAVE') {
      await require('../themes/vaporwave');
    }
    if (nextText === 'LIGHT' || nextText === 'DARK') {
      // already imported, so must get and set vars declaratively
      const baseFont = getComputedStyle(document.documentElement).getPropertyValue('--sans');
      document.documentElement.style.backgroundColor = 'lime';
      console.log(`baseFont`, baseFont);
    }
    if (toggleModeBtn.innerHTML.includes('DARK')) {
      setLightTheme(nextText);
      return;
    }
    if (toggleModeBtn.innerHTML.includes('LIGHT')) {
      setDarkMode(nextText);
      return;
    }
  }
}
function setDarkMode(nextText) {
  const bg1Dark = getComputedStyle(document.documentElement).getPropertyValue('--bg-1-dark');
  const bg2Dark = getComputedStyle(document.documentElement).getPropertyValue('--bg-2-dark');
  const textColorDark = getComputedStyle(document.documentElement).getPropertyValue('--text-color-dark');
  const greyDark = getComputedStyle(document.documentElement).getPropertyValue('--grey-dark');
  const accent1Dark = getComputedStyle(document.documentElement).getPropertyValue('--accent-1-dark');
  const accent2Dark = getComputedStyle(document.documentElement).getPropertyValue('--accent-2-dark');
  document.documentElement.style.setProperty('--bg-1', bg1Dark);
  document.documentElement.style.setProperty('--bg-2', bg2Dark);
  document.documentElement.style.setProperty('--text-color', textColorDark);
  document.documentElement.style.setProperty('--grey', greyDark);
  document.documentElement.style.setProperty('--accent-1', accent1Dark);
  document.documentElement.style.setProperty('--accent-2', accent2Dark);
  const toggleModeBtn = document.querySelector('.toggle-mode-btn');
  if (toggleModeBtn) {
    toggleModeBtn.innerHTML = `${nextText ? nextText : `DARK`}`;
  }
}
function setLightMode(nextText) {
  const bg1Light = getComputedStyle(document.documentElement).getPropertyValue('--bg-1-light');
  const bg2Light = getComputedStyle(document.documentElement).getPropertyValue('--bg-2-light');
  const textColorLight = getComputedStyle(document.documentElement).getPropertyValue('--text-color-light');
  const greyLight = getComputedStyle(document.documentElement).getPropertyValue('--grey-light');
  const accent1Light = getComputedStyle(document.documentElement).getPropertyValue('--accent-1-light');
  const accent2Light = getComputedStyle(document.documentElement).getPropertyValue('--accent-2-light');
  document.documentElement.style.setProperty('--bg-1', bg1Light);
  document.documentElement.style.setProperty('--bg-2', bg2Light);
  document.documentElement.style.setProperty('--text-color', textColorLight);
  document.documentElement.style.setProperty('--grey', greyLight);
  document.documentElement.style.setProperty('--accent-1', accent1Light);
  document.documentElement.style.setProperty('--accent-2', accent2Light);
  const toggleModeBtn = document.querySelector('.toggle-mode-btn');
  if (toggleModeBtn) {
    toggleModeBtn.innerHTML = `${nextText ? nextText : `LIGHT`}`;
  }
}
